<?php
/**
 * FineTune
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * OpenAI API
 *
 * OpenAI is an AI research and deployment company. Our mission is to ensure that artificial general intelligence benefits all of humanity.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAI\Client\Model;

use \ArrayAccess;
use \OpenAI\Client\ObjectSerializer;

/**
 * FineTune Class Doc Comment
 *
 * @category Class
 * @package  OpenAI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class FineTune implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'FineTune';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'string',
        'object' => 'string',
        'model' => 'string',
        'created_at' => 'int',
        'events' => 'array',
        'fine_tuned_model' => 'string',
        'hyperparams' => 'object',
        'organization_id' => 'string',
        'result_files' => 'array',
        'status' => 'string',
        'validation_files' => 'array',
        'training_files' => 'array',
        'updated_at' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'id' => null,
        'object' => null,
        'model' => null,
        'created_at' => null,
        'events' => null,
        'fine_tuned_model' => null,
        'hyperparams' => null,
        'organization_id' => null,
        'result_files' => null,
        'status' => null,
        'validation_files' => null,
        'training_files' => null,
        'updated_at' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'object' => 'object',
        'model' => 'model',
        'created_at' => 'created_at',
        'events' => 'events',
        'fine_tuned_model' => 'fine_tuned_model',
        'hyperparams' => 'hyperparams',
        'organization_id' => 'organization_id',
        'result_files' => 'result_files',
        'status' => 'status',
        'validation_files' => 'validation_files',
        'training_files' => 'training_files',
        'updated_at' => 'updated_at'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'object' => 'setObject',
        'model' => 'setModel',
        'created_at' => 'setCreatedAt',
        'events' => 'setEvents',
        'fine_tuned_model' => 'setFineTunedModel',
        'hyperparams' => 'setHyperparams',
        'organization_id' => 'setOrganizationId',
        'result_files' => 'setResultFiles',
        'status' => 'setStatus',
        'validation_files' => 'setValidationFiles',
        'training_files' => 'setTrainingFiles',
        'updated_at' => 'setUpdatedAt'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'object' => 'getObject',
        'model' => 'getModel',
        'created_at' => 'getCreatedAt',
        'events' => 'getEvents',
        'fine_tuned_model' => 'getFineTunedModel',
        'hyperparams' => 'getHyperparams',
        'organization_id' => 'getOrganizationId',
        'result_files' => 'getResultFiles',
        'status' => 'getStatus',
        'validation_files' => 'getValidationFiles',
        'training_files' => 'getTrainingFiles',
        'updated_at' => 'getUpdatedAt'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = $data['id'] ?? null;
        $this->container['object'] = $data['object'] ?? null;
        $this->container['model'] = $data['model'] ?? null;
        $this->container['created_at'] = $data['created_at'] ?? null;
        $this->container['events'] = $data['events'] ?? null;
        $this->container['fine_tuned_model'] = $data['fine_tuned_model'] ?? null;
        $this->container['hyperparams'] = $data['hyperparams'] ?? null;
        $this->container['organization_id'] = $data['organization_id'] ?? null;
        $this->container['result_files'] = $data['result_files'] ?? null;
        $this->container['status'] = $data['status'] ?? null;
        $this->container['validation_files'] = $data['validation_files'] ?? null;
        $this->container['training_files'] = $data['training_files'] ?? null;
        $this->container['updated_at'] = $data['updated_at'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return string|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string|null $id id
     *
     * @return self
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets object
     *
     * @return string|null
     */
    public function getObject()
    {
        return $this->container['object'];
    }

    /**
     * Sets object
     *
     * @param string|null $object object
     *
     * @return self
     */
    public function setObject($object)
    {
        $this->container['object'] = $object;

        return $this;
    }

    /**
     * Gets model
     *
     * @return string|null
     */
    public function getModel()
    {
        return $this->container['model'];
    }

    /**
     * Sets model
     *
     * @param string|null $model model
     *
     * @return self
     */
    public function setModel($model)
    {
        $this->container['model'] = $model;

        return $this;
    }

    /**
     * Gets created_at
     *
     * @return int|null
     */
    public function getCreatedAt()
    {
        return $this->container['created_at'];
    }

    /**
     * Sets created_at
     *
     * @param int|null $created_at created_at
     *
     * @return self
     */
    public function setCreatedAt($created_at)
    {
        $this->container['created_at'] = $created_at;

        return $this;
    }

    /**
     * Gets events
     *
     * @return array|null
     */
    public function getEvents()
    {
        return $this->container['events'];
    }

    /**
     * Sets events
     *
     * @param array|null $events events
     *
     * @return self
     */
    public function setEvents($events)
    {
        $this->container['events'] = $events;

        return $this;
    }

    /**
     * Gets fine_tuned_model
     *
     * @return string|null
     */
    public function getFineTunedModel()
    {
        return $this->container['fine_tuned_model'];
    }

    /**
     * Sets fine_tuned_model
     *
     * @param string|null $fine_tuned_model fine_tuned_model
     *
     * @return self
     */
    public function setFineTunedModel($fine_tuned_model)
    {
        $this->container['fine_tuned_model'] = $fine_tuned_model;

        return $this;
    }

    /**
     * Gets hyperparams
     *
     * @return object|null
     */
    public function getHyperparams()
    {
        return $this->container['hyperparams'];
    }

    /**
     * Sets hyperparams
     *
     * @param object|null $hyperparams hyperparams
     *
     * @return self
     */
    public function setHyperparams($hyperparams)
    {
        $this->container['hyperparams'] = $hyperparams;

        return $this;
    }

    /**
     * Gets organization_id
     *
     * @return string|null
     */
    public function getOrganizationId()
    {
        return $this->container['organization_id'];
    }

    /**
     * Sets organization_id
     *
     * @param string|null $organization_id organization_id
     *
     * @return self
     */
    public function setOrganizationId($organization_id)
    {
        $this->container['organization_id'] = $organization_id;

        return $this;
    }

    /**
     * Gets result_files
     *
     * @return array|null
     */
    public function getResultFiles()
    {
        return $this->container['result_files'];
    }

    /**
     * Sets result_files
     *
     * @param array|null $result_files result_files
     *
     * @return self
     */
    public function setResultFiles($result_files)
    {
        $this->container['result_files'] = $result_files;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string|null $status status
     *
     * @return self
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets validation_files
     *
     * @return array|null
     */
    public function getValidationFiles()
    {
        return $this->container['validation_files'];
    }

    /**
     * Sets validation_files
     *
     * @param array|null $validation_files validation_files
     *
     * @return self
     */
    public function setValidationFiles($validation_files)
    {
        $this->container['validation_files'] = $validation_files;

        return $this;
    }

    /**
     * Gets training_files
     *
     * @return array|null
     */
    public function getTrainingFiles()
    {
        return $this->container['training_files'];
    }

    /**
     * Sets training_files
     *
     * @param array|null $training_files training_files
     *
     * @return self
     */
    public function setTrainingFiles($training_files)
    {
        $this->container['training_files'] = $training_files;

        return $this;
    }

    /**
     * Gets updated_at
     *
     * @return int|null
     */
    public function getUpdatedAt()
    {
        return $this->container['updated_at'];
    }

    /**
     * Sets updated_at
     *
     * @param int|null $updated_at updated_at
     *
     * @return self
     */
    public function setUpdatedAt($updated_at)
    {
        $this->container['updated_at'] = $updated_at;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


