<?php
/**
 * CompletionPayload
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * OpenAI API
 *
 * OpenAI is an AI research and deployment company. Our mission is to ensure that artificial general intelligence benefits all of humanity.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAI\Client\Model;

use \ArrayAccess;
use \OpenAI\Client\ObjectSerializer;

/**
 * CompletionPayload Class Doc Comment
 *
 * @category Class
 * @package  OpenAI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class CompletionPayload implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'CompletionPayload';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'model' => 'string',
        'prompt' => 'string|array',
        'max_tokens' => 'int',
        'temperature' => 'float',
        'top_p' => 'float',
        'n' => 'int',
        'stream' => 'bool',
        'logprobs' => 'int',
        'echo' => 'bool',
        'stop' => 'string|array',
        'presence_penalty' => 'float',
        'frequency_penalty' => 'float',
        'best_of' => 'int',
        'logit_bias' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'model' => null,
        'prompt' => null,
        'max_tokens' => null,
        'temperature' => null,
        'top_p' => null,
        'n' => null,
        'stream' => null,
        'logprobs' => null,
        'echo' => null,
        'stop' => null,
        'presence_penalty' => null,
        'frequency_penalty' => null,
        'best_of' => null,
        'logit_bias' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'model' => 'model',
        'prompt' => 'prompt',
        'max_tokens' => 'max_tokens',
        'temperature' => 'temperature',
        'top_p' => 'top_p',
        'n' => 'n',
        'stream' => 'stream',
        'logprobs' => 'logprobs',
        'echo' => 'echo',
        'stop' => 'stop',
        'presence_penalty' => 'presence_penalty',
        'frequency_penalty' => 'frequency_penalty',
        'best_of' => 'best_of',
        'logit_bias' => 'logit_bias'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'model' => 'setModel',
        'prompt' => 'setPrompt',
        'max_tokens' => 'setMaxTokens',
        'temperature' => 'setTemperature',
        'top_p' => 'setTopP',
        'n' => 'setN',
        'stream' => 'setStream',
        'logprobs' => 'setLogprobs',
        'echo' => 'setEcho',
        'stop' => 'setStop',
        'presence_penalty' => 'setPresencePenalty',
        'frequency_penalty' => 'setFrequencyPenalty',
        'best_of' => 'setBestOf',
        'logit_bias' => 'setLogitBias'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'model' => 'getModel',
        'prompt' => 'getPrompt',
        'max_tokens' => 'getMaxTokens',
        'temperature' => 'getTemperature',
        'top_p' => 'getTopP',
        'n' => 'getN',
        'stream' => 'getStream',
        'logprobs' => 'getLogprobs',
        'echo' => 'getEcho',
        'stop' => 'getStop',
        'presence_penalty' => 'getPresencePenalty',
        'frequency_penalty' => 'getFrequencyPenalty',
        'best_of' => 'getBestOf',
        'logit_bias' => 'getLogitBias'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['model'] = $data['model'] ?? null;
        $this->container['prompt'] = $data['prompt'] ?? null;
        $this->container['max_tokens'] = $data['max_tokens'] ?? 16;
        $this->container['temperature'] = $data['temperature'] ?? 1;
        $this->container['top_p'] = $data['top_p'] ?? 1;
        $this->container['n'] = $data['n'] ?? 1;
        $this->container['stream'] = $data['stream'] ?? false;
        $this->container['logprobs'] = $data['logprobs'] ?? null;
        $this->container['echo'] = $data['echo'] ?? false;
        $this->container['stop'] = $data['stop'] ?? null;
        $this->container['presence_penalty'] = $data['presence_penalty'] ?? 0;
        $this->container['frequency_penalty'] = $data['frequency_penalty'] ?? 0;
        $this->container['best_of'] = $data['best_of'] ?? 1;
        $this->container['logit_bias'] = $data['logit_bias'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets model
     *
     * @return string|null
     */
    public function getModel()
    {
        return $this->container['model'];
    }

    /**
     * Sets model
     *
     * @param string|null $model ID of the model to use.
     *
     * @return self
     */
    public function setModel($model)
    {
        $this->container['model'] = $model;

        return $this;
    }

    /**
     * Gets prompt
     *
     * @return string|array|null
     */
    public function getPrompt()
    {
        return $this->container['prompt'];
    }

    /**
     * Sets prompt
     *
     * @param string|array $prompt The prompt(s) to generate completions for, encoded as a string, a list of strings, or a list of token lists.
     *
     * @return self
     */
    public function setPrompt($prompt)
    {
        $this->container['prompt'] = $prompt;

        return $this;
    }

    /**
     * Gets max_tokens
     *
     * @return int|null
     */
    public function getMaxTokens()
    {
        return $this->container['max_tokens'];
    }

    /**
     * Sets max_tokens
     *
     * @param int|null $max_tokens The maximum number of tokens to generate. Requests can use up to 2048 tokens shared between prompt and completion.
     *
     * @return self
     */
    public function setMaxTokens($max_tokens)
    {
        $this->container['max_tokens'] = $max_tokens;

        return $this;
    }

    /**
     * Gets temperature
     *
     * @return float|null
     */
    public function getTemperature()
    {
        return $this->container['temperature'];
    }

    /**
     * Sets temperature
     *
     * @param float|null $temperature The maximum number of tokens to generate. Requests can use up to 2048 tokens shared between prompt and completion.
     *
     * @return self
     */
    public function setTemperature($temperature)
    {
        $this->container['temperature'] = $temperature;

        return $this;
    }

    /**
     * Gets top_p
     *
     * @return float|null
     */
    public function getTopP()
    {
        return $this->container['top_p'];
    }

    /**
     * Sets top_p
     *
     * @param float|null $top_p An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass.
     *
     * @return self
     */
    public function setTopP($top_p)
    {
        $this->container['top_p'] = $top_p;

        return $this;
    }

    /**
     * Gets n
     *
     * @return int|null
     */
    public function getN()
    {
        return $this->container['n'];
    }

    /**
     * Sets n
     *
     * @param int|null $n How many completions to generate for each prompt.
     *
     * @return self
     */
    public function setN($n)
    {
        $this->container['n'] = $n;

        return $this;
    }

    /**
     * Gets stream
     *
     * @return bool|null
     */
    public function getStream()
    {
        return $this->container['stream'];
    }

    /**
     * Sets stream
     *
     * @param bool|null $stream Whether to stream back partial progress. If set, tokens will be sent as data-only server-sent events as they become available, with the stream terminated by a data: [DONE] message.
     *
     * @return self
     */
    public function setStream($stream)
    {
        $this->container['stream'] = $stream;

        return $this;
    }

    /**
     * Gets logprobs
     *
     * @return int|null
     */
    public function getLogprobs()
    {
        return $this->container['logprobs'];
    }

    /**
     * Sets logprobs
     *
     * @param int|null $logprobs Include the log probabilities on the logprobs most likely tokens, as well the chosen tokens.
     *
     * @return self
     */
    public function setLogprobs($logprobs)
    {
        $this->container['logprobs'] = $logprobs;

        return $this;
    }

    /**
     * Gets echo
     *
     * @return bool|null
     */
    public function getEcho()
    {
        return $this->container['echo'];
    }

    /**
     * Sets echo
     *
     * @param bool|null $echo Echo back the prompt in addition to the completion.
     *
     * @return self
     */
    public function setEcho($echo)
    {
        $this->container['echo'] = $echo;

        return $this;
    }

    /**
     * Gets stop
     *
     * @return string|array|null
     */
    public function getStop()
    {
        return $this->container['stop'];
    }

    /**
     * Sets stop
     *
     * @param string|array|null $stop Up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence.
     *
     * @return self
     */
    public function setStop($stop)
    {
        $this->container['stop'] = $stop;

        return $this;
    }

    /**
     * Gets presence_penalty
     *
     * @return float|null
     */
    public function getPresencePenalty()
    {
        return $this->container['presence_penalty'];
    }

    /**
     * Sets presence_penalty
     *
     * @param float|null $presence_penalty Number between 0 and 1 that penalizes new tokens based on whether they appear in the text so far. Increases the model's likelihood to talk about new topics.
     *
     * @return self
     */
    public function setPresencePenalty($presence_penalty)
    {
        $this->container['presence_penalty'] = $presence_penalty;

        return $this;
    }

    /**
     * Gets frequency_penalty
     *
     * @return float|null
     */
    public function getFrequencyPenalty()
    {
        return $this->container['frequency_penalty'];
    }

    /**
     * Sets frequency_penalty
     *
     * @param float|null $frequency_penalty Number between 0 and 1 that penalizes new tokens based on their existing frequency in the text so far. Decreases the model's likelihood to repeat the same line verbatim.
     *
     * @return self
     */
    public function setFrequencyPenalty($frequency_penalty)
    {
        $this->container['frequency_penalty'] = $frequency_penalty;

        return $this;
    }

    /**
     * Gets best_of
     *
     * @return int|null
     */
    public function getBestOf()
    {
        return $this->container['best_of'];
    }

    /**
     * Sets best_of
     *
     * @param int|null $best_of Generates best_of completions server-side and returns the \"best\" (the one with the lowest log probability per token). Results cannot be streamed.
     *
     * @return self
     */
    public function setBestOf($best_of)
    {
        $this->container['best_of'] = $best_of;

        return $this;
    }

    /**
     * Gets logit_bias
     *
     * @return object|null
     */
    public function getLogitBias()
    {
        return $this->container['logit_bias'];
    }

    /**
     * Sets logit_bias
     *
     * @param object|null $logit_bias Modify the likelihood of specified tokens appearing in the completion.
     *
     * @return self
     */
    public function setLogitBias($logit_bias)
    {
        $this->container['logit_bias'] = $logit_bias;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


