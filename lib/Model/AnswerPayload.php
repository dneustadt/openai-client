<?php
/**
 * AnswerPayload
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * OpenAI API
 *
 * OpenAI is an AI research and deployment company. Our mission is to ensure that artificial general intelligence benefits all of humanity.
 *
 * The version of the OpenAPI document: 1.0.0
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.1.1
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * AnswerPayload Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<TKey, TValue>
 * @template TKey int|null
 * @template TValue mixed|null
 */
class AnswerPayload implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'AnswerPayload';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'model' => 'string',
        'question' => 'string',
        'examples' => 'array',
        'examples_context' => 'string',
        'documents' => 'array',
        'file' => 'string',
        'search_model' => 'string',
        'temperature' => 'float',
        'logprobs' => 'int',
        'max_tokens' => 'int',
        'stop' => 'string|array',
        'n' => 'int',
        'logit_bias' => 'object',
        'return_metadata' => 'bool',
        'return_prompt' => 'bool',
        'expand' => 'array'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'model' => null,
        'question' => null,
        'examples' => null,
        'examples_context' => null,
        'documents' => null,
        'file' => null,
        'search_model' => null,
        'temperature' => null,
        'logprobs' => null,
        'max_tokens' => null,
        'stop' => null,
        'n' => null,
        'logit_bias' => null,
        'return_metadata' => null,
        'return_prompt' => null,
        'expand' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'model' => 'model',
        'question' => 'question',
        'examples' => 'examples',
        'examples_context' => 'examples_context',
        'documents' => 'documents',
        'file' => 'file',
        'search_model' => 'search_model',
        'temperature' => 'temperature',
        'logprobs' => 'logprobs',
        'max_tokens' => 'max_tokens',
        'stop' => 'stop',
        'n' => 'n',
        'logit_bias' => 'logit_bias',
        'return_metadata' => 'return_metadata',
        'return_prompt' => 'return_prompt',
        'expand' => 'expand'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'model' => 'setModel',
        'question' => 'setQuestion',
        'examples' => 'setExamples',
        'examples_context' => 'setExamplesContext',
        'documents' => 'setDocuments',
        'file' => 'setFile',
        'search_model' => 'setSearchModel',
        'temperature' => 'setTemperature',
        'logprobs' => 'setLogprobs',
        'max_tokens' => 'setMaxTokens',
        'stop' => 'setStop',
        'n' => 'setN',
        'logit_bias' => 'setLogitBias',
        'return_metadata' => 'setReturnMetadata',
        'return_prompt' => 'setReturnPrompt',
        'expand' => 'setExpand'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'model' => 'getModel',
        'question' => 'getQuestion',
        'examples' => 'getExamples',
        'examples_context' => 'getExamplesContext',
        'documents' => 'getDocuments',
        'file' => 'getFile',
        'search_model' => 'getSearchModel',
        'temperature' => 'getTemperature',
        'logprobs' => 'getLogprobs',
        'max_tokens' => 'getMaxTokens',
        'stop' => 'getStop',
        'n' => 'getN',
        'logit_bias' => 'getLogitBias',
        'return_metadata' => 'getReturnMetadata',
        'return_prompt' => 'getReturnPrompt',
        'expand' => 'getExpand'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['model'] = $data['model'] ?? null;
        $this->container['question'] = $data['question'] ?? null;
        $this->container['examples'] = $data['examples'] ?? null;
        $this->container['examples_context'] = $data['examples_context'] ?? null;
        $this->container['documents'] = $data['documents'] ?? null;
        $this->container['file'] = $data['file'] ?? null;
        $this->container['search_model'] = $data['search_model'] ?? 'ada';
        $this->container['temperature'] = $data['temperature'] ?? 0;
        $this->container['logprobs'] = $data['logprobs'] ?? 0;
        $this->container['max_tokens'] = $data['max_tokens'] ?? 16;
        $this->container['stop'] = $data['stop'] ?? null;
        $this->container['n'] = $data['n'] ?? 1;
        $this->container['logit_bias'] = $data['logit_bias'] ?? null;
        $this->container['return_metadata'] = $data['return_metadata'] ?? false;
        $this->container['return_prompt'] = $data['return_prompt'] ?? false;
        $this->container['expand'] = $data['expand'] ?? null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets model
     *
     * @return string|null
     */
    public function getModel()
    {
        return $this->container['model'];
    }

    /**
     * Sets model
     *
     * @param string|null $model ID of the engine to use for completion.
     *
     * @return self
     */
    public function setModel($model)
    {
        $this->container['model'] = $model;

        return $this;
    }

    /**
     * Gets question
     *
     * @return string|null
     */
    public function getQuestion()
    {
        return $this->container['question'];
    }

    /**
     * Sets question
     *
     * @param string|null $question Question to get answered.
     *
     * @return self
     */
    public function setQuestion($question)
    {
        $this->container['question'] = $question;

        return $this;
    }

    /**
     * Gets examples
     *
     * @return array|null
     */
    public function getExamples()
    {
        return $this->container['examples'];
    }

    /**
     * Sets examples
     *
     * @param array|null $examples List of (question, answer) pairs that will help steer the model towards the tone and answer format you'd like. We recommend adding 2 to 3 examples.
     *
     * @return self
     */
    public function setExamples($examples)
    {
        $this->container['examples'] = $examples;

        return $this;
    }

    /**
     * Gets examples_context
     *
     * @return string|null
     */
    public function getExamplesContext()
    {
        return $this->container['examples_context'];
    }

    /**
     * Sets examples_context
     *
     * @param string|null $examples_context A text snippet containing the contextual information used to generate the answers for the examples you provide.
     *
     * @return self
     */
    public function setExamplesContext($examples_context)
    {
        $this->container['examples_context'] = $examples_context;

        return $this;
    }

    /**
     * Gets documents
     *
     * @return array|null
     */
    public function getDocuments()
    {
        return $this->container['documents'];
    }

    /**
     * Sets documents
     *
     * @param array|null $documents List of documents from which the answer for the input question should be derived. If this is an empty list, the question will be answered based on the question-answer examples.
     *
     * @return self
     */
    public function setDocuments($documents)
    {
        $this->container['documents'] = $documents;

        return $this;
    }

    /**
     * Gets file
     *
     * @return string|null
     */
    public function getFile()
    {
        return $this->container['file'];
    }

    /**
     * Sets file
     *
     * @param string|null $file The ID of an uploaded file that contains documents to search over. See upload file for how to upload a file of the desired format and purpose.
     *
     * @return self
     */
    public function setFile($file)
    {
        $this->container['file'] = $file;

        return $this;
    }

    /**
     * Gets search_model
     *
     * @return string|null
     */
    public function getSearchModel()
    {
        return $this->container['search_model'];
    }

    /**
     * Sets search_model
     *
     * @param string|null $search_model ID of the engine to use for Search.
     *
     * @return self
     */
    public function setSearchModel($search_model)
    {
        $this->container['search_model'] = $search_model;

        return $this;
    }

    /**
     * Gets temperature
     *
     * @return float|null
     */
    public function getTemperature()
    {
        return $this->container['temperature'];
    }

    /**
     * Sets temperature
     *
     * @param float|null $temperature What sampling temperature to use. Higher values mean the model will take more risks and value 0 (argmax sampling) works better for scenarios with a well-defined answer.
     *
     * @return self
     */
    public function setTemperature($temperature)
    {
        $this->container['temperature'] = $temperature;

        return $this;
    }

    /**
     * Gets logprobs
     *
     * @return int|null
     */
    public function getLogprobs()
    {
        return $this->container['logprobs'];
    }

    /**
     * Sets logprobs
     *
     * @param int|null $logprobs Include the log probabilities on the logprobs most likely tokens, as well the chosen tokens.
     *
     * @return self
     */
    public function setLogprobs($logprobs)
    {
        $this->container['logprobs'] = $logprobs;

        return $this;
    }

    /**
     * Gets max_tokens
     *
     * @return int|null
     */
    public function getMaxTokens()
    {
        return $this->container['max_tokens'];
    }

    /**
     * Sets max_tokens
     *
     * @param int|null $max_tokens The maximum number of tokens allowed for the generated answer.
     *
     * @return self
     */
    public function setMaxTokens($max_tokens)
    {
        $this->container['max_tokens'] = $max_tokens;

        return $this;
    }

    /**
     * Gets stop
     *
     * @return string|array|null
     */
    public function getStop()
    {
        return $this->container['stop'];
    }

    /**
     * Sets stop
     *
     * @param string|array|null $stop Up to 4 sequences where the API will stop generating further tokens. The returned text will not contain the stop sequence.
     *
     * @return self
     */
    public function setStop($stop)
    {
        $this->container['stop'] = $stop;

        return $this;
    }

    /**
     * Gets n
     *
     * @return int|null
     */
    public function getN()
    {
        return $this->container['n'];
    }

    /**
     * Sets n
     *
     * @param int|null $n How many answers to generate for each question.
     *
     * @return self
     */
    public function setN($n)
    {
        $this->container['n'] = $n;

        return $this;
    }

    /**
     * Gets logit_bias
     *
     * @return object|null
     */
    public function getLogitBias()
    {
        return $this->container['logit_bias'];
    }

    /**
     * Sets logit_bias
     *
     * @param object|null $logit_bias Modify the likelihood of specified tokens appearing in the completion.
     *
     * @return self
     */
    public function setLogitBias($logit_bias)
    {
        $this->container['logit_bias'] = $logit_bias;

        return $this;
    }

    /**
     * Gets return_metadata
     *
     * @return bool|null
     */
    public function getReturnMetadata()
    {
        return $this->container['return_metadata'];
    }

    /**
     * Sets return_metadata
     *
     * @param bool|null $return_metadata A special boolean flag for showing metadata. If set to true, each document entry in the returned JSON will contain a \"metadata\" field.
     *
     * @return self
     */
    public function setReturnMetadata($return_metadata)
    {
        $this->container['return_metadata'] = $return_metadata;

        return $this;
    }

    /**
     * Gets return_prompt
     *
     * @return bool|null
     */
    public function getReturnPrompt()
    {
        return $this->container['return_prompt'];
    }

    /**
     * Sets return_prompt
     *
     * @param bool|null $return_prompt If set to true, the returned JSON will include a \"prompt\" field containing the final prompt that was used to request a completion. This is mainly useful for debugging purposes.
     *
     * @return self
     */
    public function setReturnPrompt($return_prompt)
    {
        $this->container['return_prompt'] = $return_prompt;

        return $this;
    }

    /**
     * Gets expand
     *
     * @return array|null
     */
    public function getExpand()
    {
        return $this->container['expand'];
    }

    /**
     * Sets expand
     *
     * @param array|null $expand If an object name is in the list, we provide the full information of the object; otherwise, we only provide the object ID. Currently we support completion and file objects for expansion.
     *
     * @return self
     */
    public function setExpand($expand)
    {
        $this->container['expand'] = $expand;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


